package org.bluebridge.utils;

import cn.hutool.core.io.FileUtil;
import cn.hutool.core.util.ArrayUtil;
import cn.hutool.core.util.HexUtil;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;

import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.UserPrincipal;
import java.nio.file.attribute.UserPrincipalLookupService;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.Set;
import java.util.stream.IntStream;

/**
 * 还原表端二进制数据为图片流程：
 *  1.先zip解压 压缩以后的字节数组
 *  2.将解压后的字节数组（1000字节） 按200字节一组，分为五组
 *  3.将200字节还原成1600字节
 *  4.加上bmp头+1600字节输出为bmp文件
 */
@Slf4j
public class ImageUtil {

    /**
     * bmp图片的头
     */
    private static final int[] BMP_IMAGE_HEADER_1 = { 0x42, 0x4d, 0x76, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x04, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x02, 0x02, 0x02, 0x00, 0x03, 0x03, 0x03, 0x00, 0x04, 0x04, 0x04, 0x00, 0x05, 0x05, 0x05, 0x00, 0x06, 0x06, 0x06, 0x00, 0x07, 0x07, 0x07, 0x00, 0x08, 0x08, 0x08, 0x00, 0x09, 0x09, 0x09, 0x00, 0x0a, 0x0a, 0x0a, 0x00, 0x0b, 0x0b, 0x0b, 0x00, 0x0c, 0x0c, 0x0c, 0x00, 0x0d, 0x0d, 0x0d, 0x00, 0x0e, 0x0e, 0x0e, 0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x10, 0x10, 0x10, 0x00, 0x11, 0x11, 0x11, 0x00, 0x12, 0x12, 0x12, 0x00, 0x13, 0x13, 0x13, 0x00, 0x14, 0x14, 0x14, 0x00, 0x15, 0x15, 0x15, 0x00, 0x16, 0x16, 0x16, 0x00, 0x17, 0x17, 0x17, 0x00, 0x18, 0x18, 0x18, 0x00, 0x19, 0x19, 0x19, 0x00, 0x1a, 0x1a, 0x1a, 0x00, 0x1b, 0x1b, 0x1b, 0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x1d, 0x1d, 0x1d, 0x00, 0x1e, 0x1e, 0x1e, 0x00, 0x1f, 0x1f, 0x1f, 0x00, 0x20, 0x20, 0x20, 0x00, 0x21, 0x21, 0x21, 0x00, 0x22, 0x22, 0x22, 0x00, 0x23, 0x23, 0x23, 0x00, 0x24, 0x24, 0x24, 0x00, 0x25, 0x25, 0x25, 0x00, 0x26, 0x26, 0x26, 0x00, 0x27, 0x27, 0x27, 0x00, 0x28, 0x28, 0x28, 0x00, 0x29, 0x29, 0x29, 0x00, 0x2a, 0x2a, 0x2a, 0x00, 0x2b, 0x2b, 0x2b, 0x00, 0x2c, 0x2c, 0x2c, 0x00, 0x2d, 0x2d, 0x2d, 0x00, 0x2e, 0x2e, 0x2e, 0x00, 0x2f, 0x2f, 0x2f, 0x00, 0x30, 0x30, 0x30, 0x00, 0x31, 0x31, 0x31, 0x00, 0x32, 0x32, 0x32, 0x00, 0x33, 0x33, 0x33, 0x00, 0x34, 0x34, 0x34, 0x00, 0x35, 0x35, 0x35, 0x00, 0x36, 0x36, 0x36, 0x00, 0x37, 0x37, 0x37, 0x00, 0x38, 0x38, 0x38, 0x00, 0x39, 0x39, 0x39, 0x00, 0x3a, 0x3a, 0x3a, 0x00, 0x3b, 0x3b, 0x3b, 0x00, 0x3c, 0x3c, 0x3c, 0x00, 0x3d, 0x3d, 0x3d, 0x00, 0x3e, 0x3e, 0x3e, 0x00, 0x3f, 0x3f, 0x3f, 0x00, 0x40, 0x40, 0x40, 0x00, 0x41, 0x41, 0x41, 0x00, 0x42, 0x42, 0x42, 0x00, 0x43, 0x43, 0x43, 0x00, 0x44, 0x44, 0x44, 0x00, 0x45, 0x45, 0x45, 0x00, 0x46, 0x46, 0x46, 0x00, 0x47, 0x47, 0x47, 0x00, 0x48, 0x48, 0x48, 0x00, 0x49, 0x49, 0x49, 0x00, 0x4a, 0x4a, 0x4a, 0x00, 0x4b, 0x4b, 0x4b, 0x00, 0x4c, 0x4c, 0x4c, 0x00, 0x4d, 0x4d, 0x4d, 0x00, 0x4e, 0x4e, 0x4e, 0x00, 0x4f, 0x4f, 0x4f, 0x00, 0x50, 0x50, 0x50, 0x00, 0x51, 0x51, 0x51, 0x00, 0x52, 0x52, 0x52, 0x00, 0x53, 0x53, 0x53, 0x00, 0x54, 0x54, 0x54, 0x00, 0x55, 0x55, 0x55, 0x00, 0x56, 0x56, 0x56, 0x00, 0x57, 0x57, 0x57, 0x00, 0x58, 0x58, 0x58, 0x00, 0x59, 0x59, 0x59, 0x00, 0x5a, 0x5a, 0x5a, 0x00, 0x5b, 0x5b, 0x5b, 0x00, 0x5c, 0x5c, 0x5c, 0x00, 0x5d, 0x5d, 0x5d, 0x00, 0x5e, 0x5e, 0x5e, 0x00, 0x5f, 0x5f, 0x5f, 0x00, 0x60, 0x60, 0x60, 0x00, 0x61, 0x61, 0x61, 0x00, 0x62, 0x62, 0x62, 0x00, 0x63, 0x63, 0x63, 0x00, 0x64, 0x64, 0x64, 0x00, 0x65, 0x65, 0x65, 0x00, 0x66, 0x66, 0x66, 0x00, 0x67, 0x67, 0x67, 0x00, 0x68, 0x68, 0x68, 0x00, 0x69, 0x69, 0x69, 0x00, 0x6a, 0x6a, 0x6a, 0x00, 0x6b, 0x6b, 0x6b, 0x00, 0x6c, 0x6c, 0x6c, 0x00, 0x6d, 0x6d, 0x6d, 0x00, 0x6e, 0x6e, 0x6e, 0x00, 0x6f, 0x6f, 0x6f, 0x00, 0x70, 0x70, 0x70, 0x00, 0x71, 0x71, 0x71, 0x00, 0x72, 0x72, 0x72, 0x00, 0x73, 0x73, 0x73, 0x00, 0x74, 0x74, 0x74, 0x00, 0x75, 0x75, 0x75, 0x00, 0x76, 0x76, 0x76, 0x00, 0x77, 0x77, 0x77, 0x00, 0x78, 0x78, 0x78, 0x00, 0x79, 0x79, 0x79, 0x00, 0x7a, 0x7a, 0x7a, 0x00, 0x7b, 0x7b, 0x7b, 0x00, 0x7c, 0x7c, 0x7c, 0x00, 0x7d, 0x7d, 0x7d, 0x00, 0x7e, 0x7e, 0x7e, 0x00, 0x7f, 0x7f, 0x7f, 0x00, 0x80, 0x80, 0x80, 0x00, 0x81, 0x81, 0x81, 0x00, 0x82, 0x82, 0x82, 0x00, 0x83, 0x83, 0x83, 0x00, 0x84, 0x84, 0x84, 0x00, 0x85, 0x85, 0x85, 0x00, 0x86, 0x86, 0x86, 0x00, 0x87, 0x87, 0x87, 0x00, 0x88, 0x88, 0x88, 0x00, 0x89, 0x89, 0x89, 0x00, 0x8a, 0x8a, 0x8a, 0x00, 0x8b, 0x8b, 0x8b, 0x00, 0x8c, 0x8c, 0x8c, 0x00, 0x8d, 0x8d, 0x8d, 0x00, 0x8e, 0x8e, 0x8e, 0x00, 0x8f, 0x8f, 0x8f, 0x00, 0x90, 0x90, 0x90, 0x00, 0x91, 0x91, 0x91, 0x00, 0x92, 0x92, 0x92, 0x00, 0x93, 0x93, 0x93, 0x00, 0x94, 0x94, 0x94, 0x00, 0x95, 0x95, 0x95, 0x00, 0x96, 0x96, 0x96, 0x00, 0x97, 0x97, 0x97, 0x00, 0x98, 0x98, 0x98, 0x00, 0x99, 0x99, 0x99, 0x00, 0x9a, 0x9a, 0x9a, 0x00, 0x9b, 0x9b, 0x9b, 0x00, 0x9c, 0x9c, 0x9c, 0x00, 0x9d, 0x9d, 0x9d, 0x00, 0x9e, 0x9e, 0x9e, 0x00, 0x9f, 0x9f, 0x9f, 0x00, 0xa0, 0xa0, 0xa0, 0x00, 0xa1, 0xa1, 0xa1, 0x00, 0xa2, 0xa2, 0xa2, 0x00, 0xa3, 0xa3, 0xa3, 0x00, 0xa4, 0xa4, 0xa4, 0x00, 0xa5, 0xa5, 0xa5, 0x00, 0xa6, 0xa6, 0xa6, 0x00, 0xa7, 0xa7, 0xa7, 0x00, 0xa8, 0xa8, 0xa8, 0x00, 0xa9, 0xa9, 0xa9, 0x00, 0xaa, 0xaa, 0xaa, 0x00, 0xab, 0xab, 0xab, 0x00, 0xac, 0xac, 0xac, 0x00, 0xad, 0xad, 0xad, 0x00, 0xae, 0xae, 0xae, 0x00, 0xaf, 0xaf, 0xaf, 0x00, 0xb0, 0xb0, 0xb0, 0x00, 0xb1, 0xb1, 0xb1, 0x00, 0xb2, 0xb2, 0xb2, 0x00, 0xb3, 0xb3, 0xb3, 0x00, 0xb4, 0xb4, 0xb4, 0x00, 0xb5, 0xb5, 0xb5, 0x00, 0xb6, 0xb6, 0xb6, 0x00, 0xb7, 0xb7, 0xb7, 0x00, 0xb8, 0xb8, 0xb8, 0x00, 0xb9, 0xb9, 0xb9, 0x00, 0xba, 0xba, 0xba, 0x00, 0xbb, 0xbb, 0xbb, 0x00, 0xbc, 0xbc, 0xbc, 0x00, 0xbd, 0xbd, 0xbd, 0x00, 0xbe, 0xbe, 0xbe, 0x00, 0xbf, 0xbf, 0xbf, 0x00, 0xc0, 0xc0, 0xc0, 0x00, 0xc1, 0xc1, 0xc1, 0x00, 0xc2, 0xc2, 0xc2, 0x00, 0xc3, 0xc3, 0xc3, 0x00, 0xc4, 0xc4, 0xc4, 0x00, 0xc5, 0xc5, 0xc5, 0x00, 0xc6, 0xc6, 0xc6, 0x00, 0xc7, 0xc7, 0xc7, 0x00, 0xc8, 0xc8, 0xc8, 0x00, 0xc9, 0xc9, 0xc9, 0x00, 0xca, 0xca, 0xca, 0x00, 0xcb, 0xcb, 0xcb, 0x00, 0xcc, 0xcc, 0xcc, 0x00, 0xcd, 0xcd, 0xcd, 0x00, 0xce, 0xce, 0xce, 0x00, 0xcf, 0xcf, 0xcf, 0x00, 0xd0, 0xd0, 0xd0, 0x00, 0xd1, 0xd1, 0xd1, 0x00, 0xd2, 0xd2, 0xd2, 0x00, 0xd3, 0xd3, 0xd3, 0x00, 0xd4, 0xd4, 0xd4, 0x00, 0xd5, 0xd5, 0xd5, 0x00, 0xd6, 0xd6, 0xd6, 0x00, 0xd7, 0xd7, 0xd7, 0x00, 0xd8, 0xd8, 0xd8, 0x00, 0xd9, 0xd9, 0xd9, 0x00, 0xda, 0xda, 0xda, 0x00, 0xdb, 0xdb, 0xdb, 0x00, 0xdc, 0xdc, 0xdc, 0x00, 0xdd, 0xdd, 0xdd, 0x00, 0xde, 0xde, 0xde, 0x00, 0xdf, 0xdf, 0xdf, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0xe1, 0xe1, 0xe1, 0x00, 0xe2, 0xe2, 0xe2, 0x00, 0xe3, 0xe3, 0xe3, 0x00, 0xe4, 0xe4, 0xe4, 0x00, 0xe5, 0xe5, 0xe5, 0x00, 0xe6, 0xe6, 0xe6, 0x00, 0xe7, 0xe7, 0xe7, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe9, 0xe9, 0xe9, 0x00, 0xea, 0xea, 0xea, 0x00, 0xeb, 0xeb, 0xeb, 0x00, 0xec, 0xec, 0xec, 0x00, 0xed, 0xed, 0xed, 0x00, 0xee, 0xee, 0xee, 0x00, 0xef, 0xef, 0xef, 0x00, 0xf0, 0xf0, 0xf0, 0x00, 0xf1, 0xf1, 0xf1, 0x00, 0xf2, 0xf2, 0xf2, 0x00, 0xf3, 0xf3, 0xf3, 0x00, 0xf4, 0xf4, 0xf4, 0x00, 0xf5, 0xf5, 0xf5, 0x00, 0xf6, 0xf6, 0xf6, 0x00, 0xf7, 0xf7, 0xf7, 0x00, 0xf8, 0xf8, 0xf8, 0x00, 0xf9, 0xf9, 0xf9, 0x00, 0xfa, 0xfa, 0xfa, 0x00, 0xfb, 0xfb, 0xfb, 0x00, 0xfc, 0xfc, 0xfc, 0x00, 0xfd, 0xfd, 0xfd, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0xff, 0xff, 0xff, 0x00 };

    /**
     * 把一个byte转换为8个bits，并且把这8个bits放入到一个数组中
     * @param b
     * @return
     */
    private static byte[] transByteToBitsArray(byte b) {
        StringBuilder binaryString = new StringBuilder();
        for (int i = 7; i >= 0; i--) {
            binaryString.append((b >> i) & 1);
        }
        byte[] target = new byte[8];
        IntStream.range(0, 8).forEach(i ->  {
            // 使用纯黑(0)和纯白(255)获得更好的浏览器兼容性
            target[i] = (byte) Integer.parseInt(binaryString.substring(i, i + 1)) == 1 ? (byte)255 : (byte)0;
        });
        return target;
    }

    private static byte[] transImageBitsToBytes_1(byte[] src) {
        byte[] des = new byte[1600];
        for (int i = 0; i < 200; i++) {
            byte[] trans = transByteToBitsArray(src[i]);
            for(int j=0; j < 8; j++) {
                int index = i * 8 + j;
                des[index] = trans[j];
            }
            //处理图像镜像显示问题
            if(i % 5 == 0 && i != 0) {
                //5个字节/40个字节 为单位取出一行
                byte[] line = ArrayUtil.reverse(Arrays.copyOfRange(des, (i - 5) * 8, (i * 8)));
                System.arraycopy(line,0,des,(i - 5) * 8,40);
            }
        }
        return des;
    }

    private static byte[] transImageBitsToBytes_2(byte[] src) {
        // 把byte[]数组转换为bit数组
        byte[] des = new byte[src.length * 8];
        for (int i = 0; i < src.length; i++) {
            byte[] trans = transByteToBitsArray(src[i]);
            for(int j = 0; j < 8; j++) {
                int index = i * 8 + j;
                des[index] = trans[j];
            }
        }
        return des;
    }

    /**
     * 将原始二进制数据转换为图片并输出
     * @param source 原始数据
     * @param imagePath 图像保存位置
     * @param imagePrefix 图像名称前缀
     */
    public static void transferBytesToImages_1(int[] source,String imagePath,String imagePrefix) {
        //使用gzip算法解压原始数据
        byte[] unGZipBytes = ZipUtils.unGZip(ZipUtils.intArrToByteArr(source));

        for(int i = 0; i < 5; i++) {
            //获取每个图片的字节数组，一共有1000个字节，每个图片占200字节，共有5张图片
            byte[] srcBytes = Arrays.copyOfRange(unGZipBytes, 0 + (200 * i), 200 + (200 * i));
            //获取还原后的字节数组
            byte[] desBytes = transImageBitsToBytes_1(srcBytes);
            //合并bmp头和bmp内容
            byte[] bmpBytes = ArrayUtil.addAll(ZipUtils.intArrToByteArr(BMP_IMAGE_HEADER_1), desBytes);
            FileUtil.writeBytes(bmpBytes,imagePath + imagePrefix + i + ".bmp");
        }
    }

    /**
     * 将原始二进制数据转换为图片并输出
     * @param source 原始数据
     * @param imagePath 图像保存位置
     * @param imagePrefix 图像名称前缀
     */
    public static void transferBytesToImages_2(int[] source,String imagePath,String imagePrefix) {
        String hex = "1007c000000000000000003006207c22a00008008000a083204087c002000000000000003006807c02200000008000a083022247d002000000000000002002007c082002000000008003000043d002000000000000003800843c002080a0028000000300034bc002000000000000003803043c002000000080080003225053c002000000000000003000117c0020000000202000032a0157c002000000000007003000017c002000000000284003020b57c002000000000002003800147c002000000000004003a00147c003000000000008002000147c002000000020008826a80347c003000000000008005800147c0030000000008008a1a80347c002000000000000801800147c0020000020020038a18a0147c002000000000004802800147c00200080000a009882c00147c00200000000000d002880443c8020020a800280c2a3f80147c002000000000002001800147c20200200200a8068a1a80147c003000000000000001800547c2a300200802a80a821ba0953c003000000000000801880017c00220082000a88a883b80933c003000000000000003800007c20202022802008aa8bea0143c003000000000000001001147c203022aa0a02288089a80143c013000000000000401a00043c00300aa000820024a12a0443c003000000000000003800443c00300020000a808083aa0443c003000000000008001a01043c20300000a0002084a1f80443c003000000000008001880443c2032000a8000a2d881b82443c00300000000000b801a84443c00200000000222c881ba2443c00200000000000e801a00443c02202000000000ec81b88443c002000000000004001b80443c28202800000080a801b88443c002000000000008001b80043c2a30008b8000a04082b88443c003000404000006000f80443c0020000a080020b881f80543c022000000200010011880143c0022800a8e0280a083a80143c002000000000008003ac0043c003000208a8020aa83ba0043c002000000000000083e80003c00380020aa08002882b80003c003c00f001800000821c0003c02be03f88380000283848003c047e07f007f0000003140003c0f7e0ff0ffe0002283b48003c073e0fc1c0f8000083340003c3e760f00e2f800c883980003c6a3e0f00e038010083100003c7e3e0e01e0b8000283b28003c603e0f03e038000093324003ce03e0fa3e038208093300003dc03f0febfc78200003200003c803e0ffffefa8012833e0003c003406fffff02008833a0003c003602fffff8f80883368003c002040c01fc0000883380003c203200c00ec0283c83380003c002004000010003080080003c002000000180003281888003c002000000000002081980003c002000000002002a81b80003c012000000000002081a00003c802000000080002280808083c0120000000000000821e0003c802200002a80002a87300003c002000000000000086300003c002000000800200a84a00003c002000000000000080280003c002200000220804a81ea8003c002000000000018081a00003c80200a000282a00a822a8003c002000000000004083380003c80220820028a804a833a8003c00200000000000c083300003c0020000be80000ca833a8003c002200014000000083380003c882000083a000082813a0003c00200103e000004881320003c00200022e080104a82368003c0020000030000000933e0003c00200000202a000a83340003c002000000000004097300003c002020000002a8a281328003c01201fce8410000090338003c1f20ffff8fc00ab281b38003c1f207fff8780402093920003cff207fff87e0802283100003dcf20383f07e0700082300003daf20781e00e2f022823a0003c07207c1e00e0b00083300003c0720781a00f3b83282328003c0f20783e01e0200082300003c8fe0783e0070b8b082328003c1ea0f81feff0300082320003ddfe0f83fffe0680282b00003d1fe07807ffc0b03c923a0003c0f60780fff83e80082b20003c04207100fe013000821a0003c072000008800e200823a0083c0020000001000020833a0003c0820000000000042823a0003c002000000000004081180003c022000000a00000081960003c0020000000000050833a0003c802200000000001283320003c012000000000007081380003c802000800000000081300083c002000000000000081300003c0020008a0000008281300003c002000000000008081380003c80202808a000004a833e0003c0020000000000080833a0003c00200000200002c281300003c002000000000005083310003c022000088000000082330003c002000000000744087930003c0020a80000005000a1960003c0020001e0000004080f80003c00200a9dfc180080821a0003c002000108000000082100003c802022a0ba8000d883b20003c012000058000000081300003c002000008882000281900003c002000000500000080300003c02200008a002000280b20003c002000000000000082300003c822000d8b0008a8282320003c002000f8003c008082340003c822203f803fc0a8082300003c002007f117fc0000823f0003c002087e00ffc0200a3110003c00000f803fbc307082140003c30708f40fe9ca45282b000035fefe0f90fc0c153086198003cfffe0f03f8081712821180035fffe0f87f00b1210823800035af7c07ffe69f200286300003c460007ff861e203086380003c002003ff001a603a87300003c002001fe000c100082300003c00200078803e0002821a0003c0020000007c0005082180003c002080003800004282320003c05200000000700d006380003c00202000000000d286900003c002000000000008006100003c80200000088000d082300003c002420000008007006380003c00203000001800c3a63a0003c002020000000004082108003c002030000804024086018003c0020200000000040827c0003c002020080802800082f00003c002000000000000082308003c802000000000002283b00003c002000000000007082300003ca020002800000052a2338003c002000000000000082300003c80200022680200da82300003c00200000000000b083300003c82200088000280d083328003c00200040500000f083308003c822000223a80b898a3338003c00200004100001d003308003c022282083880ab1981300083df02000040400000187340003c7c2000000000001887308083c0c2000000010002086300003c0832000802600018a2208003c003f0079c164003082200003c007f81f809f80010a63a0003c072fc1f801f8003086300003c97f787f0e13e20d8a4338003c1bbf87e041fc003886300003cff378f00e03e001086328003dfc238700e03a503086300003c78338705f03a00a286328003df0778784f85a603082300003df8778781ff9e60b2ae308003dc03787fffff800b086300003d803707fffff100e2a6308003c007787ffefc5003087380003c283380fc39c0000284300003c0020006000c0005081300003c002020000180000280300003c002020000100007084340003c0020220018000000a9b08003c0020000010000090803c0003c022000000a000190a3108003d002400540000009082300003c0020000080000080a8308003c00200000000000f081300003c00200000008020d0a8320003c012000000000009082300003c00208000020000d0a2300003c00200000001400d082310003c00208000020000d882338003c002000000000009082318003c02200000000000d083b00003d00200000000000d081300003c02200000080000d2a8308003c00240014680000d080380003c00208000908000da80300083c00240004a000009086300007c822000bdc02000d0873a0003c01240011810000f083302007c8020000baa0008f0833a0883c00200000000040b083380003c8020008e022020f2811a0003c00200004000400f090180003c006000800200023082320003c0021400040700030823a4003c8073a23e01fc003282330203c043f807c01fc003083308003c07ff80fc00d880328a300023c07ef85fc003cc03081300003c0e73c3f8383f003083300003c3d23c3e0380b103087203803c642387e0380630f287300003c3d3383a0780e313086300003cb823c3e0fc0f013282300003c8023c3e1fc1f013082300207dc03383fbfcff406087300003cc033d0fbffbe45308730000780023c0ffffb800f08331a00380022c07fe798102001300007c00a2000f800a002a83b00007c002000400000000003300007c002000000000007023b00007c002000040020000006220007c282000000000003284300007c002400000100003007241007c0020000000000800a3200007c002000000000003003240007c0020000000000010a1300007c002000000000001001f01287c002000000000001083000007c002000000000003003100407c00200000000000108320800fc002000010004003083200007c002000000000022083b00007dd120000000000010033a00079fff7fffffffffff7819f8007bffffffffffffffff81800407ffffffffffffe000002800007c000000000000000000800007c000000000000000220c28007c000000000000000000000007c000000000000000804038007dffffffffffffffffff038027bffffffffffffffffffffa007bffffffffffff001e05ff8027c000000000000000000000207c000000000000000000000107c00000002000000000000c007c004001400000000000001047c0000000280000010000e820fc000000000000000600010007c000000002000000000004887c00000004000000000055200fc000000800000080000021207d0000000000000000001f642fc000000000000000000687003c00040000000000000074410bc000000000000000001a04003d0041000000000500057020a7c000000000000000000a05003d004005555540050000e0406fc000000000000000002e05083c000000000000000002c000c7e010000000505fffe02805c0360000000000000000100040133e07fffffffffffffe20052837ffffffffffffffffe1004053ffffffffffffffffff000742a0000002000000022bf00046950003a000000000003b0005102a080010020000008fa000030115000000000000006e20053c08080030000000000f600000804040000000000001ec00044500020010000000003f800100b80000100000000003f00005415180009000000002fa00000000200000004000000ea08005155500801000000000f60000000a020000000000001fc00019045551001400000003f800018000080000000000007b00001f401557500500000007e00003002a00210000001001e400007c500120d5004000001f400006800a00a0c100000007e80001dd5555540d505000003d80000d800200000000000007f00201fc15005581140000007e00001780000002004000001e4002067d5541540005150001e400002f800000108a0000007d800007e54551554005554007d80000de80000000000000047e00021ba";
        //byte[] unGZipBytes = ZipUtils.unGZip(HexUtil.decodeHex(hex));
        byte[] unGZipBytes = HexUtil.decodeHex(hex);
        //使用gzip算法解压原始数据
        //byte[] unGZipBytes = ZipUtils.unGZip(ZipUtils.intArrToByteArr(source));
        //获取还原后的字节数组
        byte[] desBytes = transImageBitsToBytes_2(unGZipBytes);
        for(int i = 0; i < desBytes.length; i++) {
            if(i % 100 == 0 && i != 0) {
                System.out.println();
            }
            if(i % 100 <= 30) {
                desBytes[i] = 0;
            }
            System.out.print((desBytes[i] & 0xFF) + "\t");
        }
        //byte[] bmpBytes = BmpHeaderUtil.createBmpFile(desBytes, 100, 320);
        // 不旋转直接输出图片
        //FileUtil.writeBytes(bmpBytes,imagePath + imagePrefix + ".bmp");

        // 把图片顺时针旋转90度
        desBytes = ImageRotationUtils.rotateImage(desBytes, 100, 320, 90);
        byte[] bmpBytes = BmpHeaderUtil.createBmpFile(desBytes, 320, 100);
        FileUtil.writeBytes(bmpBytes,imagePath + imagePrefix + ".bmp");
        File file = new File(imagePath + imagePrefix + ".bmp");
        file.setReadable(true, false);
    }

    public static void transferBytesToImages_3(byte[] source, String imagePath, String imagePrefix) throws IOException {
        try {
            String filePath = imagePath + imagePrefix + ".jpeg";
            source = ImageRotationUtils.rotateJpeg90Degrees(source);
            FileUtil.writeBytes(source, filePath);
        } catch (IOException e) {
            throw new RuntimeException("JPEG图片旋转失败: " + e.getMessage(), e);
        }
    }

}
