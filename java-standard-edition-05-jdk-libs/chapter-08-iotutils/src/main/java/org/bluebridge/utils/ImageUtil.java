package org.bluebridge.utils;

import cn.hutool.core.io.FileUtil;
import cn.hutool.core.util.ArrayUtil;
import cn.hutool.core.util.HexUtil;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;

import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.UserPrincipal;
import java.nio.file.attribute.UserPrincipalLookupService;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.Set;
import java.util.stream.IntStream;

/**
 * 还原表端二进制数据为图片流程：
 *  1.先zip解压 压缩以后的字节数组
 *  2.将解压后的字节数组（1000字节） 按200字节一组，分为五组
 *  3.将200字节还原成1600字节
 *  4.加上bmp头+1600字节输出为bmp文件
 */
@Slf4j
public class ImageUtil {

    /**
     * bmp图片的头
     */
    private static final int[] BMP_IMAGE_HEADER_1 = { 0x42, 0x4d, 0x76, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x04, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x02, 0x02, 0x02, 0x00, 0x03, 0x03, 0x03, 0x00, 0x04, 0x04, 0x04, 0x00, 0x05, 0x05, 0x05, 0x00, 0x06, 0x06, 0x06, 0x00, 0x07, 0x07, 0x07, 0x00, 0x08, 0x08, 0x08, 0x00, 0x09, 0x09, 0x09, 0x00, 0x0a, 0x0a, 0x0a, 0x00, 0x0b, 0x0b, 0x0b, 0x00, 0x0c, 0x0c, 0x0c, 0x00, 0x0d, 0x0d, 0x0d, 0x00, 0x0e, 0x0e, 0x0e, 0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x10, 0x10, 0x10, 0x00, 0x11, 0x11, 0x11, 0x00, 0x12, 0x12, 0x12, 0x00, 0x13, 0x13, 0x13, 0x00, 0x14, 0x14, 0x14, 0x00, 0x15, 0x15, 0x15, 0x00, 0x16, 0x16, 0x16, 0x00, 0x17, 0x17, 0x17, 0x00, 0x18, 0x18, 0x18, 0x00, 0x19, 0x19, 0x19, 0x00, 0x1a, 0x1a, 0x1a, 0x00, 0x1b, 0x1b, 0x1b, 0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x1d, 0x1d, 0x1d, 0x00, 0x1e, 0x1e, 0x1e, 0x00, 0x1f, 0x1f, 0x1f, 0x00, 0x20, 0x20, 0x20, 0x00, 0x21, 0x21, 0x21, 0x00, 0x22, 0x22, 0x22, 0x00, 0x23, 0x23, 0x23, 0x00, 0x24, 0x24, 0x24, 0x00, 0x25, 0x25, 0x25, 0x00, 0x26, 0x26, 0x26, 0x00, 0x27, 0x27, 0x27, 0x00, 0x28, 0x28, 0x28, 0x00, 0x29, 0x29, 0x29, 0x00, 0x2a, 0x2a, 0x2a, 0x00, 0x2b, 0x2b, 0x2b, 0x00, 0x2c, 0x2c, 0x2c, 0x00, 0x2d, 0x2d, 0x2d, 0x00, 0x2e, 0x2e, 0x2e, 0x00, 0x2f, 0x2f, 0x2f, 0x00, 0x30, 0x30, 0x30, 0x00, 0x31, 0x31, 0x31, 0x00, 0x32, 0x32, 0x32, 0x00, 0x33, 0x33, 0x33, 0x00, 0x34, 0x34, 0x34, 0x00, 0x35, 0x35, 0x35, 0x00, 0x36, 0x36, 0x36, 0x00, 0x37, 0x37, 0x37, 0x00, 0x38, 0x38, 0x38, 0x00, 0x39, 0x39, 0x39, 0x00, 0x3a, 0x3a, 0x3a, 0x00, 0x3b, 0x3b, 0x3b, 0x00, 0x3c, 0x3c, 0x3c, 0x00, 0x3d, 0x3d, 0x3d, 0x00, 0x3e, 0x3e, 0x3e, 0x00, 0x3f, 0x3f, 0x3f, 0x00, 0x40, 0x40, 0x40, 0x00, 0x41, 0x41, 0x41, 0x00, 0x42, 0x42, 0x42, 0x00, 0x43, 0x43, 0x43, 0x00, 0x44, 0x44, 0x44, 0x00, 0x45, 0x45, 0x45, 0x00, 0x46, 0x46, 0x46, 0x00, 0x47, 0x47, 0x47, 0x00, 0x48, 0x48, 0x48, 0x00, 0x49, 0x49, 0x49, 0x00, 0x4a, 0x4a, 0x4a, 0x00, 0x4b, 0x4b, 0x4b, 0x00, 0x4c, 0x4c, 0x4c, 0x00, 0x4d, 0x4d, 0x4d, 0x00, 0x4e, 0x4e, 0x4e, 0x00, 0x4f, 0x4f, 0x4f, 0x00, 0x50, 0x50, 0x50, 0x00, 0x51, 0x51, 0x51, 0x00, 0x52, 0x52, 0x52, 0x00, 0x53, 0x53, 0x53, 0x00, 0x54, 0x54, 0x54, 0x00, 0x55, 0x55, 0x55, 0x00, 0x56, 0x56, 0x56, 0x00, 0x57, 0x57, 0x57, 0x00, 0x58, 0x58, 0x58, 0x00, 0x59, 0x59, 0x59, 0x00, 0x5a, 0x5a, 0x5a, 0x00, 0x5b, 0x5b, 0x5b, 0x00, 0x5c, 0x5c, 0x5c, 0x00, 0x5d, 0x5d, 0x5d, 0x00, 0x5e, 0x5e, 0x5e, 0x00, 0x5f, 0x5f, 0x5f, 0x00, 0x60, 0x60, 0x60, 0x00, 0x61, 0x61, 0x61, 0x00, 0x62, 0x62, 0x62, 0x00, 0x63, 0x63, 0x63, 0x00, 0x64, 0x64, 0x64, 0x00, 0x65, 0x65, 0x65, 0x00, 0x66, 0x66, 0x66, 0x00, 0x67, 0x67, 0x67, 0x00, 0x68, 0x68, 0x68, 0x00, 0x69, 0x69, 0x69, 0x00, 0x6a, 0x6a, 0x6a, 0x00, 0x6b, 0x6b, 0x6b, 0x00, 0x6c, 0x6c, 0x6c, 0x00, 0x6d, 0x6d, 0x6d, 0x00, 0x6e, 0x6e, 0x6e, 0x00, 0x6f, 0x6f, 0x6f, 0x00, 0x70, 0x70, 0x70, 0x00, 0x71, 0x71, 0x71, 0x00, 0x72, 0x72, 0x72, 0x00, 0x73, 0x73, 0x73, 0x00, 0x74, 0x74, 0x74, 0x00, 0x75, 0x75, 0x75, 0x00, 0x76, 0x76, 0x76, 0x00, 0x77, 0x77, 0x77, 0x00, 0x78, 0x78, 0x78, 0x00, 0x79, 0x79, 0x79, 0x00, 0x7a, 0x7a, 0x7a, 0x00, 0x7b, 0x7b, 0x7b, 0x00, 0x7c, 0x7c, 0x7c, 0x00, 0x7d, 0x7d, 0x7d, 0x00, 0x7e, 0x7e, 0x7e, 0x00, 0x7f, 0x7f, 0x7f, 0x00, 0x80, 0x80, 0x80, 0x00, 0x81, 0x81, 0x81, 0x00, 0x82, 0x82, 0x82, 0x00, 0x83, 0x83, 0x83, 0x00, 0x84, 0x84, 0x84, 0x00, 0x85, 0x85, 0x85, 0x00, 0x86, 0x86, 0x86, 0x00, 0x87, 0x87, 0x87, 0x00, 0x88, 0x88, 0x88, 0x00, 0x89, 0x89, 0x89, 0x00, 0x8a, 0x8a, 0x8a, 0x00, 0x8b, 0x8b, 0x8b, 0x00, 0x8c, 0x8c, 0x8c, 0x00, 0x8d, 0x8d, 0x8d, 0x00, 0x8e, 0x8e, 0x8e, 0x00, 0x8f, 0x8f, 0x8f, 0x00, 0x90, 0x90, 0x90, 0x00, 0x91, 0x91, 0x91, 0x00, 0x92, 0x92, 0x92, 0x00, 0x93, 0x93, 0x93, 0x00, 0x94, 0x94, 0x94, 0x00, 0x95, 0x95, 0x95, 0x00, 0x96, 0x96, 0x96, 0x00, 0x97, 0x97, 0x97, 0x00, 0x98, 0x98, 0x98, 0x00, 0x99, 0x99, 0x99, 0x00, 0x9a, 0x9a, 0x9a, 0x00, 0x9b, 0x9b, 0x9b, 0x00, 0x9c, 0x9c, 0x9c, 0x00, 0x9d, 0x9d, 0x9d, 0x00, 0x9e, 0x9e, 0x9e, 0x00, 0x9f, 0x9f, 0x9f, 0x00, 0xa0, 0xa0, 0xa0, 0x00, 0xa1, 0xa1, 0xa1, 0x00, 0xa2, 0xa2, 0xa2, 0x00, 0xa3, 0xa3, 0xa3, 0x00, 0xa4, 0xa4, 0xa4, 0x00, 0xa5, 0xa5, 0xa5, 0x00, 0xa6, 0xa6, 0xa6, 0x00, 0xa7, 0xa7, 0xa7, 0x00, 0xa8, 0xa8, 0xa8, 0x00, 0xa9, 0xa9, 0xa9, 0x00, 0xaa, 0xaa, 0xaa, 0x00, 0xab, 0xab, 0xab, 0x00, 0xac, 0xac, 0xac, 0x00, 0xad, 0xad, 0xad, 0x00, 0xae, 0xae, 0xae, 0x00, 0xaf, 0xaf, 0xaf, 0x00, 0xb0, 0xb0, 0xb0, 0x00, 0xb1, 0xb1, 0xb1, 0x00, 0xb2, 0xb2, 0xb2, 0x00, 0xb3, 0xb3, 0xb3, 0x00, 0xb4, 0xb4, 0xb4, 0x00, 0xb5, 0xb5, 0xb5, 0x00, 0xb6, 0xb6, 0xb6, 0x00, 0xb7, 0xb7, 0xb7, 0x00, 0xb8, 0xb8, 0xb8, 0x00, 0xb9, 0xb9, 0xb9, 0x00, 0xba, 0xba, 0xba, 0x00, 0xbb, 0xbb, 0xbb, 0x00, 0xbc, 0xbc, 0xbc, 0x00, 0xbd, 0xbd, 0xbd, 0x00, 0xbe, 0xbe, 0xbe, 0x00, 0xbf, 0xbf, 0xbf, 0x00, 0xc0, 0xc0, 0xc0, 0x00, 0xc1, 0xc1, 0xc1, 0x00, 0xc2, 0xc2, 0xc2, 0x00, 0xc3, 0xc3, 0xc3, 0x00, 0xc4, 0xc4, 0xc4, 0x00, 0xc5, 0xc5, 0xc5, 0x00, 0xc6, 0xc6, 0xc6, 0x00, 0xc7, 0xc7, 0xc7, 0x00, 0xc8, 0xc8, 0xc8, 0x00, 0xc9, 0xc9, 0xc9, 0x00, 0xca, 0xca, 0xca, 0x00, 0xcb, 0xcb, 0xcb, 0x00, 0xcc, 0xcc, 0xcc, 0x00, 0xcd, 0xcd, 0xcd, 0x00, 0xce, 0xce, 0xce, 0x00, 0xcf, 0xcf, 0xcf, 0x00, 0xd0, 0xd0, 0xd0, 0x00, 0xd1, 0xd1, 0xd1, 0x00, 0xd2, 0xd2, 0xd2, 0x00, 0xd3, 0xd3, 0xd3, 0x00, 0xd4, 0xd4, 0xd4, 0x00, 0xd5, 0xd5, 0xd5, 0x00, 0xd6, 0xd6, 0xd6, 0x00, 0xd7, 0xd7, 0xd7, 0x00, 0xd8, 0xd8, 0xd8, 0x00, 0xd9, 0xd9, 0xd9, 0x00, 0xda, 0xda, 0xda, 0x00, 0xdb, 0xdb, 0xdb, 0x00, 0xdc, 0xdc, 0xdc, 0x00, 0xdd, 0xdd, 0xdd, 0x00, 0xde, 0xde, 0xde, 0x00, 0xdf, 0xdf, 0xdf, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0xe1, 0xe1, 0xe1, 0x00, 0xe2, 0xe2, 0xe2, 0x00, 0xe3, 0xe3, 0xe3, 0x00, 0xe4, 0xe4, 0xe4, 0x00, 0xe5, 0xe5, 0xe5, 0x00, 0xe6, 0xe6, 0xe6, 0x00, 0xe7, 0xe7, 0xe7, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe9, 0xe9, 0xe9, 0x00, 0xea, 0xea, 0xea, 0x00, 0xeb, 0xeb, 0xeb, 0x00, 0xec, 0xec, 0xec, 0x00, 0xed, 0xed, 0xed, 0x00, 0xee, 0xee, 0xee, 0x00, 0xef, 0xef, 0xef, 0x00, 0xf0, 0xf0, 0xf0, 0x00, 0xf1, 0xf1, 0xf1, 0x00, 0xf2, 0xf2, 0xf2, 0x00, 0xf3, 0xf3, 0xf3, 0x00, 0xf4, 0xf4, 0xf4, 0x00, 0xf5, 0xf5, 0xf5, 0x00, 0xf6, 0xf6, 0xf6, 0x00, 0xf7, 0xf7, 0xf7, 0x00, 0xf8, 0xf8, 0xf8, 0x00, 0xf9, 0xf9, 0xf9, 0x00, 0xfa, 0xfa, 0xfa, 0x00, 0xfb, 0xfb, 0xfb, 0x00, 0xfc, 0xfc, 0xfc, 0x00, 0xfd, 0xfd, 0xfd, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0xff, 0xff, 0xff, 0x00 };

    /**
     * 把一个byte转换为8个bits，并且把这8个bits放入到一个数组中
     * @param b
     * @return
     */
//    private static byte[] transByteToBitsArray(byte b) {
//        StringBuilder binaryString = new StringBuilder();
//        for (int i = 7; i >= 0; i--) {
//            binaryString.append((b >> i) & 1);
//        }
//        byte[] target = new byte[8];
//        IntStream.range(0, 8).forEach(i ->  {
//            target[i] = (byte) Integer.parseInt(binaryString.substring(i, i + 1)) == 1 ? (byte)255 : 0;
//        });
//        return target;
//    }
    private static byte[] transByteToBitsArray(byte b) {
        StringBuilder binaryString = new StringBuilder();
        for (int i = 7; i >= 0; i--) {
            binaryString.append((b >> i) & 1);
        }
        byte[] target = new byte[8];
        IntStream.range(0, 8).forEach(i ->  {
            // 使用纯黑(0)和纯白(255)获得更好的浏览器兼容性
            target[i] = (byte) Integer.parseInt(binaryString.substring(i, i + 1)) == 1 ? (byte)255 : (byte)0;
        });
        return target;
    }
    private static byte[] transImageBitsToBytes_1(byte[] src) {
        byte[] des = new byte[1600];
        for (int i = 0; i < 200; i++) {
            byte[] trans = transByteToBitsArray(src[i]);
            for(int j=0; j < 8; j++) {
                int index = i * 8 + j;
                des[index] = trans[j];
            }
            //处理图像镜像显示问题
            if(i % 5 == 0 && i != 0) {
                //5个字节/40个字节 为单位取出一行
                byte[] line = ArrayUtil.reverse(Arrays.copyOfRange(des, (i - 5) * 8, (i * 8)));
                System.arraycopy(line,0,des,(i - 5) * 8,40);
            }
        }
        return des;
    }

    private static byte[] transImageBitsToBytes_2(byte[] src) {
        // 把byte[]数组转换为bit数组
        byte[] des = new byte[src.length * 8];
        for (int i = 0; i < src.length; i++) {
            byte[] trans = transByteToBitsArray(src[i]);
            for(int j = 0; j < 8; j++) {
                int index = i * 8 + j;
                des[index] = trans[j];
            }
        }
        return des;
    }

    /**
     * 将原始二进制数据转换为图片并输出
     * @param source 原始数据
     * @param imagePath 图像保存位置
     * @param imagePrefix 图像名称前缀
     */
    public static void transferBytesToImages_1(int[] source,String imagePath,String imagePrefix) {
        //使用gzip算法解压原始数据
        byte[] unGZipBytes = ZipUtils.unGZip(ZipUtils.intArrToByteArr(source));

        for(int i = 0; i < 5; i++) {
            //获取每个图片的字节数组，一共有1000个字节，每个图片占200字节，共有5张图片
            byte[] srcBytes = Arrays.copyOfRange(unGZipBytes, 0 + (200 * i), 200 + (200 * i));
            //获取还原后的字节数组
            byte[] desBytes = transImageBitsToBytes_1(srcBytes);
            //合并bmp头和bmp内容
            byte[] bmpBytes = ArrayUtil.addAll(ZipUtils.intArrToByteArr(BMP_IMAGE_HEADER_1), desBytes);
            FileUtil.writeBytes(bmpBytes,imagePath + imagePrefix + i + ".bmp");
        }
    }

    /**
     * 将原始二进制数据转换为图片并输出
     * @param source 原始数据
     * @param imagePath 图像保存位置
     * @param imagePrefix 图像名称前缀
     */
    public static void transferBytesToImages_2(int[] source,String imagePath,String imagePrefix) {
        String hex = "501E000000000000005003800A41E802000000000004001E80CA3E000000000000004001800C01E000000000200000001E80C81E003000000000000001800C49A001000000000000023820E03A003000000000000001800A01A0010020000000022A9200881A0010000000000000018008A1B0010000000000050A1800881B001000000000000001800A81B02100020001000E803A20803B001000000000002003800A41B0010000008000038A3A20A81B001000000000002803800201B00100000028000AC23800003F001000000000000801800001F001000000A0000E883A00001F001000000000006801800001B0010000000A0002881AA0803F001000000000000401800801F0090000000A80A2881F80801F001000000000006001800801F001000000088A86A80C80801F001000000000006800880801F0A100008208000E880D80201F00100000000000A800880001F001000002A0000A880C88001F001000000000008800C80001F001200000A0000A880D80001F001000000A00000801C80001F00120800A202002881C80001F001000000000000001880001F001200000220002881E80003F001000000000000081800001F009220000000002881BA0003F001000000000200091A00001F009200000280002A81B00000F001000000000002001200001F009202082882023A81B00000F001000000000000001A80000F029200A000008A2A80E00000F001000000000000000C80000F021200002200002800C80008F001000000000002801880000F0012A8020080003E018C8000F001000000000004001980400F0092000A2800002801980008F401000000000004001980000F02920002000240EA81900000F00100000000000C000DC0000F009000A8380000AA80DC8008F001000000000002000980000F00922008FA02802A809C8000F0010000FD000000000980400F0012AA02F000006802A08000F001000002400006800D00000F0210000A2002800000C60000F001000000000000000BE0000F00100000AA00A00001B68000F001000000000000001C00000F001000080020A02000A68000F001B007C00340028019C0000F001F80FCCBE8822801E40000F003F91FC01F8000001840000F039F83F821F822E841940000F039B87D07898000041980000D1F9B87C0781E0AA841800000D1F998380780F000841880000D3F9B83817807002041A80000D5E1B83C0F80E040841880000D381B83E9FA0E00A849BA0000D703B81FFFD8F0000419A0000F701F81FFFFFE0028410A0000D4019017FEFFC0001C1880000D0019807FFFF88A87018A8000D0018001007F0001601980000F001800000DC20024289A0000F001000000000010C00980000F8290000000000024009CA000F8010000000000004408A0000F2010002000000028008C2000F801800000000008001880000FA0980000000802A808CC0000F801800000000002801880000F801800028000002C098C0000F8018000000000028411C8000F8018000200000028408C0000F8018000000000020408E0000F8018000000002878488C2000F801800000000002041C80000F88180000000A0828488CA000F801800000000002140C80000F801800020008002848CC0000F801800000000002040880000F80180008BE220028488A0000F8018000DF200000140980000F80188001FA002028089E4000F801800018000000140D8A000F80180001AA8002084A88000078018000000400009424820007801800A0800020284A0C30007811800011000000041087000780180080000800A8492E68007801800010010100041880800780BC000023F200A0698E0000780FE00000FF00028418C0000780FE00003FFE0008690EA0007807F80007FB80008618C00007803FC807FE3A1020698C00207901B806FEA380005618800007B81F80FFE00C00A0690C00007A81B81FFE87C400D61C800007B80FC3FFFFFE00A9698D00007AC0FC3FFFFFDC403E188000078FBF01FDFFFFE028698E00007BFFE019107FE0001618800007BFFE0000001E2828400C0020782F80000000400604008000078A98002000000000428C000078118000000000000608C000078018200000000000608C00007800800000000003420CE00007800800000200000028CC200068008000000000000208C000078008200200002A8828CEE0007800800000000003020CC00006800820200000002828CC80006801800000000002001CC80006C00800020800A860298FE0006C008000000000060218C80006C00800002A00A848208CA000EC048000000000000208800006C008A8000000A80028E86000EC00800000000000020C8E0007C0880000880AAA80A8CD80007C00800040000000000CF80007C2880001E0AAA014A8CC00007C0080000B000000820C000007C208000A0A00AA1828CC20007C00800000400000820CC00007C00800280082A028286CA0007C008000010000000206C00007C0080001802080A82868A000FC008000000000000204800007C08C28000200002820CC00007C00800000000400820CD00007C0F80A0FF802083C20CC00007C1FE403FFC3E000820CD400079FFF007FFE3E808020CC00007BFEF80FFFE0F8004208480007FE8FC0FCFF0B8046206490007CC0FC0F807818024200C18007F60DC1F003038270A1EC10007FE0DC1E00780F078218600007DE0DC1F40FC3F24028AC00007CD8FC0F001820000208C00003CFDF80FE7FC7800421CE80003DFBF007FFFFEC000218E00003FFFF803FFFFF0824E88C00003C1F8001FFFF70020208C00003C058000363210830208C00003C008011000004008248C00007C00C0000001820B620EC00003C008000000010010248C00003C00C000200000032208C00003C00C000000000018208800003C00802200022A81EA0CC00003C00C00000000001221C400003C00C0208800220AA20A400003C04C020000000000200600003C00C0601800008A6A02E00003C00C060180000000202E00003C00CE40000000036BC2600003C00C20000000003820AE00003C00C000002808030A0AEA0003C00C000000000012000E00003C00C000002000096202C20003C00C00000000001C016CE0003C00C0022E02A02B6A02C00003C04C00005400001E202C00003C80CA0AA4802801E20AC00003D10C0000FC00001E202C00003C00CA003FE000006382C20003D00C00000100003C200C20003DF8C80A890000030208C00003C3CC000140000000204D10003C0080202244A0806200C00003C00F004004000002210800003DFEF800200082012204E00003DFEFC00001500002206600003DFEFF800000002BEA04480003DFCFF00040000012240600003C00CF883E8008006A0C400003C0047807E007900220C600003C004781FFFBFB812A0C4000034006381FFFFF881620C60000340067CBFFFFF9A0622AE80003404D7C3FFFFB981723C6100035FEDF81E3F189801A2E4000034FFFF008001078000006000035FFFE80000010016A08C0000357CFC0000040000A000C00003C38402803AC00006A00C00003C00C000000000018014C000034004220080200008202EC00034004000100000008006620003400400008E00200AA244000034004000000000008026600003400480000002880A8266800034004000000000018000600003420480000002881200268000340040000000000101006000034A0480000002281A002600003400400000000001A002600003600480800000A02E002600003600400000000000A00260000340A400000000008A802600003E004000000000008002600003C08482000200009EA02608003E00400000000001A040600003E00480000002001A20E620803E00400103010001A24E604003E004002FFE00003A20EE00003E00400028010001A00C600003E00400A0A600000B00A600003E10400000C00000B042604003E0040080A280001E21A6C0003E00400000000000B258600003E0040000002000AE00E6C4003E00400000000000620C6C4003E804008383012AA600C604003E06C40006F03000634C200003EFFFC003FF4FF00600C600003EFE7E00BFFC3E00614C600803E5A7F88FFFE1580600C4B8023E606F81FFFE14C0E10C400003E204F81E03F06C1E10CE18003E604381E01783C1E104850803E324381E0070F806104A02003E286381F01B0F9561046D0003E3E4383F01F7F80610C200003E7C67C3F7CE6CD1F104601803EBF7F817FFFF800E0067C000BE1FFC01FFFFF8006006600E03C00C8003FFF08000802208003E0060000C0C00000007600083E0040002000080060026B800BE00400000000000E002600003E806000000000001002282103E006000000000003006610003E006A000000000A00A64D8203E006000000000000003C10003E006000000000002022C78003E006040400000002404C79003E20600000000000A000AE0003E006000000000002501840403E006000200000002001BE000BE006151400105542501BC018BE006000000000002103F0000BE004000000000000101718009EFFC0003FFFFFFFFD0062000BFFFFFFFFFFFFFFFFF0134008BEFFFFFFFFFE00000002200001E700000000000000000242101F000000000000000003A04803E000000000000000002F000E1E000000000001BE07FEA20001E001F0DFFFFFFFFFFFF002001EFFFFFFFFFFFFFFFFFE802201FFFFFFFFFFFFF007806C06001EFFFF80000000000000804001E000000000000000003002009E00000000000000000E00600BE00000000000000001C007001E000010128000000018007403E00400000000000001C003041E0000000002000000E8000003E000000000000000170006801E0000000000800002A0007801E000000000000000000003041E0000000000000002A0003401E000000000000000400003003E000000000000001A00001403E000000000000000580000601E00A00000A0000038A0005523E000000000005500400004401EAAAA2A838000002200004529A000000000000001A00000E01B00000000000001080001CD0BBF00000000000011000036E51D00000000000FFE0000078703DFFFFFFFFFFFFFE000005A2B4FFFFFFFFFFFFFFF00001F8102FFFFFFFF7D080BF8000199195003FA3F8000003B00003FD1C28000000000000FA00003791E14140000000000EC00007E55D0800000000000BF400007E22180050050000001EC0001DE04142020020000023F80000DE008E8000014100007F00001F84504540800108000FE000037A0408A80400004001EC00006F041505F5800004001E800006E800020A0200000007B80000FE05011405E40009017D00000DE800000033C0000007E00001F8005855505D440020F600001780000000000080001EC02007780400401435040001F000007FA000802A000E040079000007E000000405551FC407800000DE000000001040A288F200001FC0075140050140053F4000017C000000000E000A93F80000778045554114251405FF000002F800000000000000079000005E00055555550555017800000DE0000000000000000EE000A1BE100";
        //byte[] unGZipBytes = ZipUtils.unGZip(HexUtil.decodeHex(hex));
        byte[] unGZipBytes = HexUtil.decodeHex(hex);
        //使用gzip算法解压原始数据
        //byte[] unGZipBytes = ZipUtils.unGZip(ZipUtils.intArrToByteArr(source));
        //获取还原后的字节数组
        byte[] desBytes = transImageBitsToBytes_2(unGZipBytes);
        for(int i = 0; i < desBytes.length; i++) {
            if(i % 100 == 0 && i != 0) {
                System.out.println();
            }
            if(i % 100 <= 30) {
                desBytes[i] = 0;
            }
            System.out.print((desBytes[i] & 0xFF) + "\t");
        }
        //byte[] bmpBytes = BmpHeaderUtil.createBmpFile(desBytes, 100, 320);
        // 不旋转直接输出图片
        //FileUtil.writeBytes(bmpBytes,imagePath + imagePrefix + ".bmp");

        // 把图片顺时针旋转90度
        desBytes = ImageRotationUtils.rotateImage(desBytes, 100, 320, 90);
        byte[] bmpBytes = BmpHeaderUtil.createBmpFile(desBytes, 320, 100);
        FileUtil.writeBytes(bmpBytes,imagePath + imagePrefix + ".bmp");
        File file = new File(imagePath + imagePrefix + ".bmp");
        file.setReadable(true, false);
    }

    public static void transferBytesToImages_3(byte[] source, String imagePath, String imagePrefix) throws IOException {
        try {
            String filePath = imagePath + imagePrefix + ".jpeg";
            source = ImageRotationUtils.rotateJpeg90Degrees(source);
            FileUtil.writeBytes(source, filePath);
        } catch (IOException e) {
            throw new RuntimeException("JPEG图片旋转失败: " + e.getMessage(), e);
        }
    }

}
