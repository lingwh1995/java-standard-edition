1.Stream使用的是函数式编程模式，可以被用来对集合或数组进行链状流式的操作，可以更方便的让我们对集合或数组操作。
2.Stream操作由三部分构成：
	1).源数据		
	2).中间操作(会将当前的流转换成另外一个流)
	3).终止操作(只有遇到终止操作的时候,所有中间操作才会执行,因为中间操作是惰性求值的)
3.Java8的Stream特点
    不存储数据
        Stream不是一个数据存储的结构，它不会存储元素，而是通过管道将数据源的元素传递给操作。
    不可变性
        Stream不会修改源数据，例如filter不会将数据源中的数据删除，每次操作会生成一个新的Stream。
    惰性求值
        Stream的中间操作是延迟执行的，只有在遇到终端操作时才会执行。
    只能遍历一次
        Stream的元素只能访问一次，类似Iterator，操作没有回头路，如果想从头重新访问流的元素，需要重新生成一个新的流。
4.Java中流的分类
	顺序执行的流(Stream)
	    在顺序流中，所有的操作都是按顺序执行的，即每个元素依次通过流的操作链。stream() 使用单线程处理数据，所有操作都是在同一个线程中按顺序进行。顺序流适合数据量较小或者不需要并行处理的场景。
	对象执行的流(Stream<T>)
	并行执行的流(ParallelStream)
	原始数值的流(IntStream等)
5.流与集合
	集合关注的是数据与数据存储本身
	流关注的是对数据的计算
6.流与迭代器
    1).流与迭代器共同点是都是无法重复使用或者说重复消费的
    2).流支持并行操作,迭代器只支持串行操作