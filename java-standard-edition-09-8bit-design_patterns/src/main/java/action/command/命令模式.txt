命令模式(Commande):
    描述:
        -将一个请求封装为一个对象,从而使你可以用不同的请求对客户端进行参数化，对请求排队或者记录请求日志，以及支持可撤销的操作
        -命令模式是一种数据驱动的设计模式，属于行为模式类别。 请求作为命令包装在对象下并传递给调用者对象。 Invoker对象查找可以处理此命令的相应对象，并将该命令传递给执行该命令的相应对象。
        -将命令的请求者和执行者解耦，通过命令关联起来
        -在命令者模式中,会为一个请求封装一个对象,以便不同的参数来表示不同的请求(即命令)
        -命令模式必须支持撤回操作
    角色分析:
        -调用者(Invoker): 要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。这个是客户端真正触发命令并要求命令执行相应操作的地方，也就是说相当于使用命令对象的入口
        -命令接口(Command):,需要执行的所有接口都在这里,可以是接口或抽象类
                利用Command接口,每个动做都被实现成一个简单的命令对象。命令独享持有一个厂商的实例引用,并实现了一个execute()方法。
        -接收者(Receiver):,知道如何实施和执行一个请求相关的操作
        -具体的命令(ConcreteCommad):将一个接收者对象与一个动作,调用接收者的相关操作,实现execute
        -客户端(Client):创建具体的命令对象，并且设置命令对象的接收者。注意这个不是我们常规意义上的客户端，而是在
         组装命令对象和接收者，或许，把这个Client称为装配者会更好理解，因为真正使用命令的客户端是从Invoker来触
         发执行。
    好处:
        -让对象之间的调用关系更加灵活，实现解耦
	示例/场景:
	深入分析:
	    1.命令模式的关键之处就是把请求封装成为对象，也就是命令对象，并定义了统一的执行操作的接口，这个命令对象可以
	     被存储、转发、记录、处理、撤销等，整个命令模式都是围绕这个对象在进行。
	    2.可撤销的操作:
	        补偿式(反操作式):比如被撤销的操作是加的功能，那撤消的实现就变成减的功能；同理被撤销的操作是打开的功能，那么撤销的实现就变成关闭的功能。
            恢复存储式:把操作前的状态记录下来，然后要撤销操作的时候就直接恢复回去就可以了。
        3.多层次的撤销操作
            如果要实现多层次的撤销操作,需要使用堆栈记录操作过程中的每一个对象

    Command模式通常可应用到以下场景：
      1 Multi-level undo（多级undo操作）
        如果系统需要实现多级回退操作，这时如果所有用户的操作都以command对象的形式实现，系统可以简
        单地用stack来保存最近执行的命令，如果用户需要执行undo操作，系统只需简单地popup一个最近的
        command对象然后执行它的undo()方法既可。

      2 Transactional behavior（原子事务行为）
        借助command模式，可以简单地实现一个具有原子事务的行为。当一个事务失败时，往往需要回退到执
        行前的状态，可以借助command对象保存这种状态，简单地处理回退操作。

      3 Progress bars（状态条）
        假如系统需要按顺序执行一系列的命令操作，如果每个command对象都提供一个
        getEstimatedDuration()方法，那么系统可以简单地评估执行状态并显示出合适的状态条。

      4 Wizards（导航）
        通常一个使用多个wizard页面来共同完成一个简单动作。一个自然的方法是使用一个command对象来封
        装wizard过程，该command对象在第一个wizard页面显示时被创建，每个wizard页面接收用户输入并设
        置到该command对象中，当最后一个wizard页面用户按下“Finish”按钮时，可以简单地触发一个事件
        调用execute()方法执行整个动作。通过这种方法，command类不包含任何跟用户界面有关的代码，可以
        分离用户界面与具体的处理逻辑。

      5 GUI buttons and menu items（GUI按钮与菜单条等等）
        Swing系统里，用户可以通过工具条按钮，菜单按钮执行命令，可以用command对象来封装命令的执行。

      6 Thread pools（线程池）
        通常一个典型的线程池实现类可能有一个名为addTask()的public方法，用来添加一项工作任务到任务
        队列中。该任务队列中的所有任务可以用command对象来封装，通常这些command对象会实现一个通用的
        接口比如java.lang.Runnable。

      7 Macro recording（宏纪录）
        可以用command对象来封装用户的一个操作，这样系统可以简单通过队列保存一系列的command对象的状
        态就可以记录用户的连续操作。这样通过执行队列中的command对象，就可以完成"Play back"操作了。

      8 Networking
        通过网络发送command命令到其他机器上运行。

      9 Parallel Processing（并发处理）
        当一个调用共享某个资源并被多个线程并发处理时。
