内部类:将一个类的定义放在另一个类的内部
四种内部类:成员内部类、静态内部类、局部内部类(方法内部类)、匿名内部类
内部类好处：
    1、内部类可以用多个实例，每个实例都有自己的状态信息，并且与其他外围对象的信息相互独立。
    2、内部类并没有令人迷惑的“is-a”关系，他就是一个独立的实体。
    3、内部类提供了更好的封装，除了该外围类，其他类都不能访问。
    4、创建内部类对象的时刻并不依赖于外围类对象的创建。
    5.每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。
内部类具有类的基本特征:可以继承一个类或者实现一个接口
    /**
     1. Outer类继承了ClassA，实现了IFunctionA
    */
    public class Outer extends ClassA implements IFunctionA{
    	/**
    	*	Inner类继承了ClassB，实现了IFunctionB
    	*/
    	public class Inner extends ClassB implements IfunctionB{
    	//
    	}
    }
成员内部类:成员内部类当成Outer的成员信息存在
    1.可以是任何的访问修饰符。
    2.内部类的内部不能有静态信息。
    3.内部类也是类,该继承继承，该重写重写，该重载重载，this和super随便用。
    4.外部类如何访问内部类信息，必须new之后打点访问。
    5.内部类可以直接使用外部类的任何信息，如果属性或者方法发生冲突，调用外部类.this.属性或者方法。
    6.其它类如何访问内部类：
        Outer outer=new Outer();
        //创造内部类对象
        Outer.Inner inner=outer.new Inner();
        inner.inner_show();
静态内部类:和成员内部类对比理解（区别异同）
    1.内部可以包含任意的信息。
    2.静态内部类的方法只能访问外部类的static关联的信息。
    3.利用 外部类.内部类 引用=new 外部类.内部类(); 然后利用引用.成员信息(属性、方法)调用。
    4.访问内部类的静态信息，直接外部类.内部类.静态信息就可以了。
    5.静态内部类可以独立存在，不依赖于其他外围类。
局部内部类:局部内有很多局限，应注意作用域
    1.类前不能有访问修饰符。
    2.仅在此方法内使用。
    3.无法创造静态信息。
    4.可以直接访问方法内的局部变量和参数（有限制，下面详谈），但是不能更改。
    5.可以随意的访问外部类的任何信息。