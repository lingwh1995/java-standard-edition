//可选配置参数
options{
     STATIC = false; //关闭生成java方法是静态的，默认是true
     DEBUG_PARSER = true;//开启调试解析打印,默认是false
     JDK_VERSION = "1.8";//生产java时使用jdk版本,默认1.5
     UNICODE_INPUT=true;//接收unicode编码的输入，默认是false
}
//固定格式
PARSER_BEGIN(Sql)
//像java一样的包名定义,生成的java文件会带上此包名
package org.openatom.javacc.calculator;
//导入包引用同Java方式

/**
* 代码说明:
*   解析
*   CREATE TABLE TEST(
*       ID INT COMMENT 'XX',
*       NAME VARCHAR
*   );
*   CREATE DATABASE TEST;
*/
public class Sql {
    //可以再里面定义初始化信息，字符串接收方式，异常处理..

    //此处的main方法不是必须，只是为了方便此次调测，后面的示例将去除
    public static void main(String[] args){
        Sql sqlParser = new Sql(System.in);
        try {
            String res = sqlParser.parseSql();
            System.out.println(res);
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}

//固定格式
PARSER_END(Sql)

//词法定义
SKIP : /*定义要跳过忽略的字符串*/
{
    " "
}
TOKEN : /*定义各种符号,包括括号*/
{
    <RIGHT_PARENTHESES : "("> |
    <LEFT_PARENTHESES : ")"> |
    <COMMA : ","> |
    <SEMICOLON : ";"> |
    // 单引号
    <SINGLE_QUOTATION_MARK : "'"> |
    <COMMENT : "COMMENT">
}
TOKEN : /*定义变量类型*/
{
    //int目前不支持括号
    <INT : "int"> |
    <CHAR : "char">
}

TOKEN : /*定义关键字和变量名(变量名称包括表名和字段名)*/
{
    <CREATE : "CREATE"> |
    <TABLE : "TABLE"> |
    <VARIABLE_NAME :  (["a"-"z","A"-"Z"])+> |
    //目前注释只支持中文
    <COMMENT_CONTENT :(["\u4e00"-"\u9fa5"])+>
}


//为了调试方便将换行定义为一个特殊的token
TOKEN : {
    < EOL : "\n" | "\r" | "\r\n" >
}

//定义语法
String parseSql():
{
    Token token ;
    StringBuilder builder = new StringBuilder();builder.append("xxx");
}
{
    /*原始结构*/
    /*
    <CREATE> <TABLE> <VARIABLE_NAME>
    <RIGHT_PARENTHESES>
        (
        <VARIABLE_NAME> AttrituabeType() [<COMMENT> <SINGLE_QUOTATION_MARK> <COMMENT_CONTENT> <SINGLE_QUOTATION_MARK>] [<COMMA>]
        )*
    <LEFT_PARENTHESES> [<COMMENT> <SINGLE_QUOTATION_MARK> <COMMENT_CONTENT> <SINGLE_QUOTATION_MARK>] <SEMICOLON>
    */
    token = <CREATE> {System.out.println(token.image);}
    token = <TABLE> {System.out.println(token.image);}
    token = <VARIABLE_NAME> {System.out.println(token.image);}
    token = <RIGHT_PARENTHESES>
    (
        token = <VARIABLE_NAME> {System.out.println(token.image);}
        token = AttrituabeType() {System.out.println(token.image);}
        [
            token = <COMMENT> {System.out.println(token.image);}
            <SINGLE_QUOTATION_MARK>
            token = <COMMENT_CONTENT> {System.out.println(token.image);}
            <SINGLE_QUOTATION_MARK>
        ]
        [
           token =  <COMMA> {System.out.println(token.image);}
        ]
    )*
    <LEFT_PARENTHESES>
    [
        token = <COMMENT> {System.out.println(token.image);}
        <SINGLE_QUOTATION_MARK>
        token = <COMMENT_CONTENT> {System.out.println(token.image);}
        <SINGLE_QUOTATION_MARK>
    ]
    <SEMICOLON>
    {
       return builder.toString();
    }
}

/*
 * 获取属性的类型
 */
void AttrituabeType() :
{

}
{
    <INT> | <CHAR>
}
