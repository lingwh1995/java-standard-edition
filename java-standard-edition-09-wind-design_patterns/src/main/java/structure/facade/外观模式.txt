外观模式也称门面模式、过程模式
    1.为子系统中的一组接口提供了一个一致的界面，此模式定义了一个高层接口，这个接口使得这一系列子系统更加容易使用
    2.外观模式通过定义一个一致的接口，用以屏蔽子系统内部的细节，使得调用端只需和这个接口发生调用，而无需关心这个
      子系统的内部细节
角色分析:
    外观类(Facade):为调用端提供统一调用接口，外观类知道哪些子系统负责处理请求，从带将请求端的请求代理给适当的子系统
    调用者(Client):外关接口的调用者
    子系统的集合:处理facade对象委派的任务，他是功能的提供者
本案例:客户端直接调用各个设备 --> 客户端调用中间层-->中间层调用各个设备
    深入分析:
    外观模式的目的不是为了给子系统增加新的功能接口，而是为了减少外部系统与多个内部子系统的交互，松散耦合，
    从而使得外部能更简单的使用子系统
    注意:外观类最重要的作用组合、包装当前子系统已经有的功能，然后暴露出一个接口供外部调用，虽然外观类可以添加
        新的功能，但是不建议这做
    屏蔽了外部客户端系统和内部模块的交互，从而把多个子模块对外组合成一个整体，相当于封装了系统内部的实现细节

好处:
    1.把公用的代码提取到一个外观类中，然后多个调用者调用的时候只需要调用外观类中封装好的接口
    2.调用者使用的时候只需要了解外观类中某个接口，不需要深入的了解某个子系统，降低了学习成本
    3.封装交互，简化调用，某一个子模块的改变只会影响到外观类，而不会影响到具体的客户端，修改时
      只要修改外观类中某一个方法就好了