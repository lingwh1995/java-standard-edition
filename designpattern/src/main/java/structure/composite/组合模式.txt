解释器模式(Composite):
    描述:
		-把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式处理部分对象和整体对象，如：杀毒
			软件查杀单个文件和查杀文件夹时可以调用同样的方法，因为单个文件和文件夹实现公共的抽象构件
    角色分析:
		-抽象构件(Component)角色:定义了叶子和容器构件的共同点
		-叶子(Leaf)构件角色:无子节点
		-容器(Composite)构件角色:有容器特征，可以包含子节点
		注意：leaf组件没有任何管理节点的能力,Composite组件有管理节点的能力
    优点:
		-组合模式为处理树形结构提供了完美的解决方案，描述了如何将容器和叶子进行递归组合，使得用户在使用时可以一致性的
		 对待叶子和容器
		-当容器对象的指定的方法被调用的时候，将遍历整个树形结构，寻找也包含这个方法的成员，并调用执行，其中，使用了递
		 归的机制对整个结构进行处理
	示例/场景:
		-杀毒软件处理单个文件和文件夹使用同一种处理方式
		-XML文件解析
		-OA系统中，组织架构处理
		-Junit单元测试框架
			 底层设计就是典型的组合模式，TestCase(叶子)、TestUnit(容器)、Test接口(抽象构件)
