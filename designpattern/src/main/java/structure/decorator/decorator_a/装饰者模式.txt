装饰者模式:
	作用:在不改变原来对象的情况下,动态的为一个对象增加新的功能
	概述:装饰者模式是一种用于代替继承的技术，无需通过增加子类就能扩展对象的新功能，使用对象的关联关系代替继承关
		系，更加灵活，同时避免体系的快速膨胀
	实现细节:
		Component(抽象构件角色):
			真实对象和装饰对象具有相同的接口，这样，客户端对象就能够以与真实对象相同的方式同装饰对象交换
		ConcreateComponent(具体构件角色/真实对象/被装饰者):
			IO流中的FileInputStream/OutputStream	
		Decorator(装饰角色/装饰器):
			持有一个抽象构件的引用，装饰对象接收所有客户端请求，并把这些请求转发给真实的对象。这样，就能在真实对象调用后增加新的功能。
		ConcreateDecorator:(具体装饰角色/具体装饰器)
			负责给构件增加新的责任	
	开发中的实际场景:
		IO流中的输入流和输出流的设计
			-Component抽象构件角色
				IO流中的InputStream、OutputStream、Reader、Writer
			-ConcreateComponent具体构件角色
				FileInputStream、FileOutStream
			-Decorator装饰角色
				持有一个抽象构件的引用:IO流中的FileInputStream、FileOutpStream		
			-ConcreateDecorator具体装饰角色
				负责给构件对象增加新的责任，IO流中的BufferedOutputStream、BufferedInputStream
		Servlet API中提供了一个Request对象的装饰者模式的默认实现类HttpServltWapper，增强了Request的功能
			