概述:
    1.动态的给一些对象添加一些额外的功能，就增加功能来说，装饰者模式比生成子类更加灵活
    2.装饰者模式装饰的是上一层操作返回的对象，不是原始的对象
    3.从一个对象外部给对象增加功能，相当于是改变了对象的外观。当装饰过后，从外部使用者角度看，就不再是使用
      原始的那个对象了，而是使用被一系列的装饰器装饰过后的对象，这样就能灵活的改变一个兑现的功能，只要动态
      组合的装饰器发了变化，那么最终所得到的对象的功能也就发生了改变，变相的得到了一个好处，就是装饰器的复
      用，可以给一个对象多次增加同一个装饰器，也可以用同一个装饰器装饰不同的对象
    4.客户端在调用方式完成具体操作的时候，是递归调用的
优点:
    装饰类和被装饰类可以独立发展，而不会相互耦合。
    装饰模式是继承关系的一个替代方案。
    装饰模式可以动态地扩展一个实现类的功能。
缺点
    多层装饰容易导致问题，尽量减少装饰类的数量，以便降低系统的复杂度。
应用场景
    需要扩展一个类的功能，或给一个类增加附加功能。
    需要动态地给一个对象增加功能，这些功能可以再动态地撤销。
    需要为一批的兄弟类进行改装或加装功能。
和继承的区别:
    继承是静态的给类增加功能，装饰者模式是动态的给类增加功能

角色:
    1.抽象组件（Component）角色：给出一个抽象类，以规范准备接收附加功能的对象。
    2.具体组件（Concrete Component）角色：定义一个将要接收附加功能的类。
    3.装饰（Decorator）角色：持有一个组件（Component）对象的实例，并实现一个与抽象构件接口一致的接口。
    4.具体装饰（Concrete Decorator）角色：负责给组件对象添加上附加的功能。

装饰者模式要点:
    1.装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。
    2.装饰对象包含一个真实对象的引用（reference）。
    3.装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。
    4.装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。
    5.装饰者模式的本质:动态组合，动态是手段，组合才是目的
和继承的对比:
    1.装饰者模式比继承更加灵活,继承时静态的，而且一旦继承是所有的子类都有一样的功能。而装饰者模式采用把
      功能分离到每个装饰器中，然后通过对象组合的方式，在运行时动态的组合功能，每个被装饰的对象，最终有哪
      些功能，是有运行时期动态组合的功能来决定的
使用场景:
    1.在不影响其他对象的情况下，以动态、透明的方式给对象添加职责，可以使用装饰者模式
    2.如果不适合使用子类进行货站的时候，就可以考虑使用装饰者模式，因为装饰者模式
      是采用"对象组合"的方式

