适配器模式:
	1.将一个类的接口转换成另一个接口，目的是使得原本由于接口不兼容而不能一起工作的那些类可以一起工作
	2.从用户角度看被适配者对用户是不可见的,解除了耦合，用户值和目标接口交互
使用适配器模式的目的:
    适配器模式的功能主要是转换匹配,目的是为了复用已经有的功能。客户端中的中的功能已经实现好了,不需要
    适配器模式来实现，适配器主要把不兼容的接口转换成客户端希望的样子
适配器模式中的角色:
	目标接口(Target):客户所能期待的接口，目标可以使具体的或者抽象的类，也可以是接口
	适配器(Adapter):	通过包装一个需要适配的对象，把原接口转换为目标接口
	需要适配的类(Adaptee):需要适配的类或者适配者类
三类适配器:
    类适配器模式
    对象适配器模式
    接口适配器模式
常见用途：1.封装有缺陷的接口设计
        2.统一多个类的接口设计
        3.替换依赖的外部系统
        4.兼容老版本接口
        5.适配不同格式的数据
最大的作用:将原本不兼容的接口融合在一起工作，最终目的是复用旧的功能，不是为了实现新的接口，主要是为了把
    不兼容的接口转换成客户端期望的样子
适配器思想；
    // 方法一
    public <K, V> Map<K, V> selectMap(String statement, String mapKey) {
      return this.selectMap(statement, null, mapKey, RowBounds.DEFAULT);
    }

    // 方法二
    public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey) {
      return this.selectMap(statement, parameter, mapKey, RowBounds.DEFAULT);
    }

    // 方法三
    public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
      final List<? extends V> list = selectList(statement, parameter, rowBounds);
      final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<>(mapKey,
              configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());
      final DefaultResultContext<V> context = new DefaultResultContext<>();
      for (V o : list) {
        context.nextResultObject(o);
        mapResultHandler.handleResult(context);
      }
      return mapResultHandler.getMappedResults();
    }
    上述代码中，方法三是核心方法，它需要四个输入参数。而有些场景下，调用方只能提供三个参数或者两个参数。为了使得只有三个参数或者两个参数的调
    用方能够正常地调用核心方法，方法一和方法二充当了方法适配器的作用。这两个适配器通过为未知参数设置默认值的方式，搭建起了调用方和核心方法之间的桥梁。

常见的应用:
    1.JDK-java.util.Collections#enumeration:对象适配器

          public interface Enumeration<E> {
                      boolean hasMoreElements();
                      E nextElement();
          }

          public static <T> Enumeration<T> enumeration(final Collection<T> c) {
                return new Enumeration<T>() {
                private final Iterator<T> i = c.iterator();

                public boolean hasMoreElements() {
                    return i.hasNext();
                   }

                    public T nextElement() {
                    return i.next();
                    }
                };
          }
        Target(目标):Enumeration
        Adapter(适配器):完成适配功能的类或者方法
        Adaptee(适配者)：Iterator
        目标:为了让Enumeration能提供遍历元素的功能，提供了IteratorEnumeration作为适配器类。
    2.JDK-InputStreamReader
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("请输入内容:");
        String input = bufferedReader.readLine();
        System.out.println("用户输入的内容:"+input);

        上面代码：System.in实际是类型为 InputStream，而由于BufferedReader与InputStream不能一起工作，于是引入
        BufferedReader 类，作为适配器类，将InputStreamReader类的接口转成 BufferedReader 类可用的接口。
    3.SpringMVCz中HandlerAdapter
    4.SpringMVC-RequestMappingHandlerAdapter
