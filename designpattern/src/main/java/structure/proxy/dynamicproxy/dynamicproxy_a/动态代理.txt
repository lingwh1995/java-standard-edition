动态代理模式:动态生成代理类
	常见动态代理实现:
		JDK自带的动态代理
		CGLB
		javaassist:字节码操作库实现
	相比于静态代理的优点:
		-抽象角色中(接口)声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样我们可以更加灵活和统一的处理众多的方法了 
	JDK自带的动态代理:
		-java.lang.reflect.Proxy
		-java.lang.reflect.InvocationHandler(处理器接口)
		可以通过invoke方法实现对真实角色的代理访问
		每次通过Proxy生成代理类对象时都要指定对应的处理器对象
	动态代理作用:
		1.核心方法之外的方法可以做一个统一的流程控制
		2.增强类，具体是增强类中的方法，如：在调用每个方法先输出该方法的名称，再调用，调用方法完成后，再次输出该方法的名称