享：共享 元：对象 享元：共享对象 享元模式：共享对象模式
享元模式(Flyweight):共享元对象/元数据
    描述:
        -主要用于减少创建的对象数量，可以减少内存占用和减少GC次数从而提高性能。这种类型的设计模式属于结构
         模式，因为该模式提供了减少对象数量的方法，从而改善了应用程序的对象结构。
        -细粒度的对象就是被共享的元数据
    角色分析:
        -Flyweight (享元抽象类)：一般是接口或者抽象类，定义了享元类的公共方法。这些方法可以分享内部状态
         的数据，也可以调用这些方法修改外部状态。
        -ConcreteFlyweight(具体享元类)：具体享元类实现了抽象享元类的方法，为享元对象开辟了内存空间来保
         存享元对象的内部数据，同时可以通过和单例模式结合只创建一个享元对象。
        -UnshareConcreteFlyweight(非共具体享元类):并不是所有的享元类都需要被共享的有的享元类就不要被
         共享，可以通过享元类来实例一个非共享享元对象。
        -Flyweight(享元工厂类)：享元工厂类创建并且管理享元类，享元工厂类针对享元类来进行编程，通过提供一
         个享元池来进行享元对象的管理。一般享元池设计成键值对，或者其他的存储结构来存储。当客户端进行享元对
         象的请求时，如果享元池中有对应的享元对象则直接返回对应的对象，否则工厂类创建对应的享元对象并保存到
         享元池。
    优点:
		-减少创建的对象数量
	缺点:
	    -提高了系统的复杂度。需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变
	示例/场景:
		-池技术:String常量池、数据库连接池、Jdk Integer
	注意事项:
	    -享元工厂一般设置成单例的
	    -重点在于区分变化和不变化的对象
	深入分析:
	    -变与不变:
	        享元模式的重点在于分离变与不变，把一个对象的状态分为内部状态和外部状态,内部状态是不可变的，外部
	        状态是可变的，然后通过共享不变的部分，达到减少对象创建，并节约内存的目的。在享元对象需要外部状
	        态的时候，可以从外部传入状态给享元对象/共享对象，共享对象会在实现具体操作的时候，使用自己内部的
	        状态和外部的状态。(实际上分离变与不变是软件设计的最基本方式之一，比如预留接口，为什么在这个地方
	        要预留接口，为什么在这个地方要预留接口，原因是因为可能会在今后需要扩展、或者是改变已有的实现，因
	        此预留接口作为'可插入性的保证')
        -共享与不共享
            在享元模式中，享元对象又有共享与不共享之分，这种情况通常出现在跟组合模式一起使用的情况，通常共享
            的是叶子对象，一般不共享的部分是由共享部分组合而成的，由于所有细粒度的叶子对象都已经缓存了，那么
            缓存组合对象就没有什么意义了
        -内部状态和外部状态
            内部状态:
                享元模式的内部状态通常指的是包含在享元对象内部的、对象本身的状态，通常是独立于使用享元的场景
                的信息，一般创建过过后就不再变化的状态，因此可以共享。
            外部状态:
                享元模式的外部状态指的是享元对象之外的状态，取决于使用享元的场景，会根据使用场景而变化，因此
                不可共享。如果享元对象需要这些外部状态的话，可以从外部传递到享元对象里面，比如通过方法的参数
                来传递。也就是说享元模式真正缓存和共享的数据是享元的内部状态，而外部状态是不应该被缓存共享的。
                另外一点，内部状态和外部状态是独立的，外部状态的变化不应该影响到内部状态。
        -享元对象和内外部状态关系
            在享元对象需要的时候，可以从外部传入外部状态给共享的对象，享元对象内部的共享对象会在功能处理的时候，
            使用自己内部的状态和这些外部的状态。



