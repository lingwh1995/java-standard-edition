概述:定于一个创建类，用来封装实例化对象的行为，也适用于大批量的生产对象，是工厂方法的一种特例
使用情况:
    在编码时不能预见需要创建哪种类的实例
    系统不应依赖于产品类实例如何被创建，组合和表达的细节。
可以使用反射对工厂模式增强

简单工厂模式的意义:
    把实例化对象的代码提取出来，放到一个类中统一维护和管理，达到客户端和对象提供者解耦，
    提高项目的扩展性和维护性
帮助封装
    简单工厂虽然很简单，但是非常友好的帮助我们实现了组件的封装，然后让组件外部能真正面向接口编程。
解耦
    通过简单工厂，实现了客户端和具体实现类的解耦。
    如同上面的例子，客户端根本就不知道具体是由谁来实现，也不知道具体是如何实现的，客户端只是通过工厂获取它需要的接口对象。
可能增加客户端的复杂度
    如果通过客户端的参数来选择具体的实现类，那么就必须让客户端能理解各个参数所代表的具体功能和含义，这会增加客户端使用的难度，也部分暴露了内部实现，这种情况可以选用可配置的方式来实现。
不方便扩展子工厂
    私有化简单工厂的构造方法，使用静态方法来创建接口，也就不能通过写简单工厂类的子类来改变创建接口的方法的行为了。不过，通常情况下是不需要为简单工厂创建子类的