1.核心作用:
    保证一个类只有一个实例,并提供一个访问该实例的全局访问点,单例只关心类实例的创建问题，而不关心具体的业务功能
2.常见场景:
    a.Windows操作系统的Task Manager(任务管理器)是很典型的单例模式
    b.Windows操作系统的资源管理器是很大的单例,因为一个操作系统只能有一个资源管理器
    c.读取配置文件的类,一般也是单例的,不会每次使用配置文件中的数据，都new一个对象去读取
    e.网站的计数器，也是使用单例模式实现,否则难以实现同步
    f.数据库连接池的设计一般也是单例模式，因为数据库连接是一种数据库资源(每次通过new产生会很耗费资源)
    g.Spring容器生产的bean,一般也是单例模式
    h.Servlet编程中Servlet是单例的,Application也是单例的
    i.单例模式适用于资源资源共享或者启动较慢的情况
3.单例模式的优点:
    a.由于单例模式只生成了一个实例,减少了系统的性能开销,当一个对象的产生需要较多资源的时候,如读取配置文件,则可以通过
    产生一个单例,永久驻留在内存中的方式来解决
    b.单例模式可以在系统设置全局的访问点,优化共享资源访问,例如可以设计一个单例类,负责所有数据表的映射
4.常见的八种单例模式实现方式:
    注意:
        1.jvm装载类的时候是线程安全的(在装载类的时候，别的类是无法进入的)，不管是装载内部类还是外部类
        2.外部类的装载不会导致内部类的装载
    a.饿汉式:两种 (线程安全,调用效率高,但是不能延时加载)
        静态常量
        静态代码块
    b.懒汉式:(三种)
    (线程安全,调用效率不高,但是可以延时加载)
    c.双重检测锁式(由于JVM底层内部模型,偶尔会出问题,不建议使用)
    d.静态内部类式(线程安全,调用效率高,但是可以延时加载)
    e.枚举单例(线程安全,调用效率高,不能延时加载)
    f.单例模式是一个虚拟机范围的单例,不适合于集群环境
5.使用步骤:
    a.私有化构造方法
    b.提供一个被 private static 修饰的变量
    c.提供一个开放的可以供外部访问的方法

    饿汉式单例模式深入分析:
        1.Java里面实现的单例是一个ClassLoader及其子ClassLoader的范围,因为一个ClassLoader在装载饿汉式实现的单例类的时候就会创建一个类的实例。
        2.被static变量在类装载的时候进行初始化,多个实例的static变量会共享同一块内存区域
    饿汉式单例模式保证线程安全单例的原理:
        因为虚拟机只会将一个类装载一次，而被static修饰的变量会在类被装载时初始化，而且被static修饰的变量共享同一块儿内存
    懒汉式单例模式深入分析:
        1.lazy-load
        2.缓存思想提现，是一种典型的空间换时间方案的体现
    http://www.icoolxue.com/play/5511