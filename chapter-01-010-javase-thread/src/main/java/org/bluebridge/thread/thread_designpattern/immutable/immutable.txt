1.不可变对象(被final修饰的对象)一定是线程安全的
2.可变对象不一定是线程不安全的
JDK官方文档中对不可变对象的描述:
    https://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html
    简单概括:
    1.Don't provide "setter" methods — methods that modify fields or objects referred to by fields.
      不要给字段提供用于修改字段或字段引用的对象的setter()方法
    2.Make all fields final and private.
      所有的字段生命成final和private的
    3.Don't allow subclasses to override methods. The simplest way to do this is to declare the class as final. A more sophisticated approach is to make the constructor private and construct instances in factory methods.
      不要让子类重写父类的方法,最简单的做法是把使用final修饰类,复杂一些的做法是使用private工厂方法来构造构造器和构造实例
    4.If the instance fields include references to mutable objects, don't allow those objects to be changed:
      如果实例字段包含可变对象的引用,则不允许更改这些对象
        Don't provide methods that modify the mutable objects.
        不要提供修改可变对象的方法
        Don't share references to the mutable objects. Never store references to external, mutable objects passed to the constructor; if necessary, create copies, and store references to the copies. Similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods.
        不要共享可变对象的引用,永远不要存储对传递给构造函数的外部可变对象的引用；如有必要，创建副本，并存储对副本的引用。同样，在必要时创建内部可变对象的副本，以避免在方法中返回原始对象。
3.Immutable模式通过不执行线程的互斥处理来提高程序性能.之所以能够去掉互斥处理,是因为Immutable角色的内部状态肯定不会发生改变