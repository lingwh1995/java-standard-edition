1.volatile关键字:
    作用简述:
        保证可见性:高速缓存的一致性协议
        保证有序性:内存屏障(内存栅栏),防止重排序
    作用:
        a.保证重排序的时候不会把后面的指令放在屏障的前面，也不会把前面的放到后面
        b.强制对外缓存的修改操作立即写入到主存
        c.如果是写操作，会导致其他CPU中的缓存失效
        e.保证不同线程之间的可见性
        f.禁止对其进行重排序,也就是保证了有序性,但不能保证原子性
            注意:i++并不是一个原子性操作,由：i=10;i=i+1即i=10+1两步组成
    使用场景:
        1.状态量标记
        2.内存屏障前后的一致性
2.分析计算机如何完成 i=1;i++; 这个操作
    主要分为以下三步:
        a.read from main memory i=1
        b.i = i+1
        c.i = 2
3.缓存不一致问题:
    从main memory中获取i的值为1->把i=1放入到cache中->从cache中获取i的值为1,进行i++计算->得到i=2->把这个值回写到主存中
    如果两个程序同时操作i这个数,进行i++,那么可能会出现两个程序操作结果都是2的情况,正确的结果是最终操作结果是3
    解决方法:
        a.给数据总线加锁
            总线分为数据总线、地址总线、控制总线
        b.CPU高速缓存一致性协议
            a.当CPU写入数据的时候，如果发现该变量被共享,(也就是是说:在其他CPU中也存在该变量的副本)，会发出一个信号,通知其他CPU针对
              该变量的缓存无效
            b.当其他CPU访问该变量的时候,重新到主内存中进行获取
            类似于数据库事物中的串行读取
4.并发编程中三个比较重要的概念:
    1.原子性
        一个操作或者多个操作,要么都成功,要么都失败,中间不能由于任何的因素中断
        注意:1.所有基本类型赋值以及读取都是原子性的
                赋值:int x = 1;
                读取:System.out.println(x);
             2.引用类型数据赋值也是原子性的
                如:   Object o1 = new Object();
                赋值: Object o2 = o1;


    2.可见性
        使用volatile保证内存可见性
    3.有序性
        重排序要求最终结果一致性