1.面向过程（C语言编程）编程/面向过程设计 的几个特征：
自顶向下：按照函数在代码中的逻辑顺序逐个实现代码功能
逐步细化：把操作QQ分为三个具体步骤，1.打开QQ，2.执行相关功能，3.关闭QQ
模块化设计：把步骤封装成多个函数，每一个函数完成一个独立的功能，好处是方便调整多个函数在代码中的逻辑顺序
结构化编码：实现逻辑和接口的分离，如一个主方法中调用三个方法，每个方法都是一个接口，三个方法共同组成一个逻辑，如果把
		    接口放在逻辑中会导致代码维护异常困难
2.计算机组成
	内存
	CPU
		Arithmetic Logic Unit（ALU） 数学逻辑单元,  进行计算计算
		Program Counter （PC）程序计数器， 实际上是记录一个地址值
		Regisiter	存放需要进行计算的数据和计算出来的结果
	IO总线
		IO总线类型
		控制线：从内存读取到CPU中的是 指令，如0101 代表 ADD
		地址线：从内存读取到CPU中的是 地址，如0101 代表 某一个地址
		数据线：从内存读取到CPU中的是 数据，如0101 代表 数值5
3.进程和线程
	进程：一个程序进入内存，称之为进程。一个程序本身可以有多个进程，同一个进程内部，有多个任务并发执行的需求，一
		  边计算，一边接收网络数据，一边刷新界面，出现了多进程解决方案，带来的问题是多个进程容易发生冲突。	  
	线程：共享空间，不共享计算，本质是一条指令，处理的数据存放在进程中，是计算机处理任务的最小单位
	区别：进程是静态的概念，程序进入内存，分配对应资源，内存空间，进程进入内存，同时产生一个主线程
		  线程是动态的概念，是可执行的计算单元，一个ALU同一时刻只能执行一个线程
	联系：1.进程是分配资源（网络资源、主要是存储资源）的主要单位，并发是在多线程访问进程中的同一份资源时出现的问题
		  2.进程有自己的空间，线程没有，线程共享的是进程的空间	
	线程的切换：
		  为什么线程要切换？
			现代计算机都是多线程进行任务处理，当一个线程1的任务执行到一半时切换到了线程2，需要将线程1的执行状态保存
			到位于进程中的缓存之中，这个过程称为保存好上下文
		  什么事线程的切换？
			保存上下文，保存上一个线程现场
		  是不是线程数量越多？执行效率越高？	
			不是，因为多个线程相互切换时需要多次保存线程上下文，会将系统资源都耗费在线程切换上
		  对于一个程序，设置多少个线程合适？（线程池设置多少个核心线程合适）	
4.CPU的并发控制
	缓存一致性协议
		CPU的速度和内存的速度（100:1），这里的速度指的是ALU访问寄存器的速度比访问内存的速度快100倍
		为了充分利用CPU计算性能，在CPU和内存之间加了缓存，现在的工业架构，多采用三级缓存架构 
	缓存行：CPU一次从内存中读取的数据块，缓存行大，缓存命中率高，效率低，缓存行小，命中率低，效率高，2021年工业设计缓存行大小为64bytes(64*8个字节)
5.超线程
	四核八线程实现：正常是一个CPU核心中有一个ALU、一个寄存器、一个PC，四核八线程（一核双线程）即一个核心中有一个ALU、两个寄存器、两个PC	